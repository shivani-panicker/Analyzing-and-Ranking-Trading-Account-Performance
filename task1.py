# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o_wwqtyqjrCLkEl0DcB4Gr1axFT6_bu3

importing libraries and dataset
"""

import pandas as pd
import ast
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

def safe_literal_eval(val):
    """Safely converts a string representation of a list into an actual list."""
    if isinstance(val, str):
        try:
            return ast.literal_eval(val)
        except (ValueError, SyntaxError):
            return []
    else:
        return []

df = pd.read_csv('/content/TRADES_CopyTr_90D_ROI.csv', on_bad_lines='skip')
df['Trade_History'] = df['Trade_History'].apply(safe_literal_eval)  # Apply conversion to all entries

"""metric calculations"""

def calculate_account_metrics(trades):
    if not isinstance(trades, list) or not trades:
        return 0, 0, 0, 0, 0, 0, 0, 0, 0

    total_positions = len(trades)
    win_positions = 0
    total_profit = 0
    total_loss = 0
    returns = []
    position_classes = []

    for trade in trades:
        realized_profit = float(trade['realizedProfit'])
        qty = float(trade['qty'])
        position_side = trade.get('positionSide', '')
        side = trade.get('side', '')

        if side == 'BUY' and position_side == 'LONG':
            position_classes.append('long_open')
        elif side == 'SELL' and position_side == 'LONG':
            position_classes.append('long_close')
        elif side == 'BUY' and position_side == 'SHORT':
            position_classes.append('short_open')
        elif side == 'SELL' and position_side == 'SHORT':
            position_classes.append('short_close')
        else:
            position_classes.append('other')

        if realized_profit > 0:
            win_positions += 1
        total_profit += realized_profit if realized_profit > 0 else 0
        total_loss += abs(realized_profit) if realized_profit < 0 else 0

        returns.append(realized_profit / qty if qty > 0 else 0)

    roi = (total_profit - total_loss) / (total_profit + total_loss) if (total_profit + total_loss) > 0 else 0
    win_rate = win_positions / total_positions if total_positions > 0 else 0
    sharpe_ratio = (np.mean(returns) / np.std(returns)) if len(returns) > 1 else 0

    max_drawdown = 0
    cumulative_returns = np.cumsum(returns)
    max_return = cumulative_returns[0]

    for current_return in cumulative_returns:
        max_drawdown = max(max_drawdown, max_return - current_return)
        max_return = max(max_return, current_return)

    return roi, total_profit, sharpe_ratio, max_drawdown, win_rate, win_positions, total_positions, position_classes

"""calculate metrics"""

account_ids = []
roi_list = []
pnl_list = []
sharpe_ratio_list = []
mdd_list = []
win_rate_list = []
total_positions_list = []
win_positions_list = []
position_classes_list = []

for account_id, trades in zip(df['Port_IDs'], df['Trade_History']):
    if isinstance(trades, list) and trades:
        roi, total_profit, sharpe_ratio, max_drawdown, win_rate, win_positions, total_positions, position_classes = calculate_account_metrics(trades)
    else:
        roi, total_profit, sharpe_ratio, max_drawdown, win_rate, win_positions, total_positions, position_classes = 0, 0, 0, 0, 0, 0, 0, []

    account_ids.append(account_id)
    roi_list.append(roi)
    pnl_list.append(total_profit)
    sharpe_ratio_list.append(sharpe_ratio)
    mdd_list.append(max_drawdown)
    win_rate_list.append(win_rate)
    total_positions_list.append(total_positions)
    win_positions_list.append(win_positions)
    position_classes_list.append(position_classes)

"""save results to dataframe and csv"""

summary_df = pd.DataFrame({
    'Port_ID': account_ids,
    'ROI': roi_list,
    'PnL': pnl_list,
    'Sharpe_Ratio': sharpe_ratio_list,
    'MDD': mdd_list,
    'Win_Rate': win_rate_list,
    'Win_Positions': win_positions_list,
    'Total_Positions': total_positions_list
})

summary_df_sorted = summary_df.sort_values(by='ROI', ascending=False)
top_20_accounts = summary_df_sorted.head(20)

summary_df.to_csv('account_metrics.csv', index=False)
top_20_accounts.to_csv('top_20_accounts.csv', index=False)

"""visualization (extra)"""

#Bar Chart for Top 20 Accounts by ROI
plt.figure(figsize=(10, 6))
sns.barplot(data=top_20_accounts, x='Port_ID', y='ROI', palette='viridis')
plt.title('Top 20 Accounts by ROI')
plt.xlabel('Account ID')
plt.ylabel('ROI')
plt.xticks(rotation=90)
plt.tight_layout()
plt.savefig('top_20_accounts_roi.png')  # Save the figure
plt.show()

# Box Plot for Profit and Loss (PnL) Distribution
plt.figure(figsize=(8, 6))
sns.boxplot(data=summary_df, x='PnL', color='orange')
plt.title('Profit and Loss (PnL) Distribution')
plt.xlabel('PnL')
plt.tight_layout()
plt.savefig('pnl_distribution.png')  # Save the figure
plt.show()

position_classes_flat = [item for sublist in position_classes_list for item in sublist]  # Flatten list of position classes
plt.figure(figsize=(8, 6))
sns.countplot(x=position_classes_flat, palette='Set2')
plt.title('Distribution of Position Types')
plt.xlabel('Position Type')
plt.ylabel('Count')
plt.tight_layout()
plt.savefig('position_class_distribution.png')  # Save the figure
plt.show()

print("\nAnalysis complete! The results have been saved to 'account_metrics.csv', 'top_20_accounts.csv', 'report.txt' and visualizations have been generated.")